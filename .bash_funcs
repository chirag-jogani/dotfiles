#run updater in terminal then sit back and relax as your machine becomes latest! 
function updater {
    sudo apt --fix-broken install -y &&
    sudo apt-get update -y &&
    sudo apt-get upgrade -y &&
    sudo apt-get dist-upgrade -y &&
    sudo apt-get install kali-linux-everything -y &&
    sudo apt-get update -y &&
    sudo apt autoremove -y &&
    sudo apt autoclean -y &&
    sudo apt clean -y &&
    sudo apt-get install -f
}

# Extract file, example. "ex package.tar.bz2"
ex() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   sudo tar -xjf $1  ;;
            *.tar.gz)    sudo tar -xzf $1  ;;
            *.bz2)       sudo bunzip2 $1  ;;
            *.rar)       sudo rar -x $1    ;;
            *.gz)        sudo gunzip $1   ;;
            *.tar)       sudo tar -xf $1   ;;
            *.tbz2)      sudo tar -xjf $1  ;;
            *.tgz)       sudo tar -xzf $1  ;;
            *.zip)       sudo unzip $1    ;;
            *.Z)         sudo uncompress $1  ;;
            *.7z)        sudo 7z -x $1     ;;
            *)           echo $1 cannot be extracted ;;
        esac
    else
        echo $1 is not a valid file
    fi
}

# Change up a variable number of directories
# E.g:
#   cu   -> cd ../
#   cu 2 -> cd ../../
#   cu 3 -> cd ../../../
function cu {
    local count=$1
    if [ -z "${count}" ]; then
        count=1
    fi
    local path=""
    for i in $(seq 1 ${count}); do
        path="${path}../"
    done
    cd $path
}
#----- VIM-------
# Open all modified files in vim tabs
function vimod {
    vim -p $(git status -suall | awk '{print $2}')
}

# Open files modified in a git commit in vim tabs; defaults to HEAD. Pop it in your .bashrc
# Examples: 
#     virev 49808d5
#     virev HEAD~3
function virev {
    commit=$1
    if [ -z "${commit}" ]; then
      commit="HEAD"
    fi
    rootdir=$(git rev-parse --show-toplevel)
    sourceFiles=$(git show --name-only --pretty="format:" ${commit} | grep -v '^$')
    toOpen=""
    for file in ${sourceFiles}; do
      file="${rootdir}/${file}"
      if [ -e "${file}" ]; then
        toOpen="${toOpen} ${file}"
      fi
    done
    if [ -z "${toOpen}" ]; then
      echo "No files were modified in ${commit}"
      return 1
    fi
    vim -p ${toOpen}
}

# 'Safe' version of __git_ps1 to avoid errors on systems that don't have it
function gitPrompt {
  command -v __git_ps1 > /dev/null && __git_ps1 "(%s)"
}

#----- AWS -------
s3ls(){
aws s3 ls s3://$1
}

s3cp(){
aws s3 c
p $2 s3://$1
}

#---- Content discovery ----
#this grabs endpoints from a application.wadl and puts them in yahooapi.txt
thewadl(){
curl -s $1 | grep path | sed -n "s/.*resource path=\"\(.*\)\".*/\1/p" | tee -a ~/tools/dirsearch/db/yahooapi.txt
}

#----- recon -----
crtndstry(){
~/tools/crtndstry/crtndstry.sh $1
}

#runs amass passively and saves to json then to domains.txt
am(){
amass enum --passive -d $1 -json $1.json
jq .name $1.json | sed "s/\"//g"| httprobe -c 60 | tee -a $1-domains.txt
}

#runs httprobe on all the hosts from certspotter
certprobe(){
curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | httprobe | tee -a ./all.txt
}

#runs masscan
mscan(){
sudo masscan -p4443,2075,2076,6443,3868,3366,8443,8080,9443,9091,3000,8000,5900,8081,6000,10000,8181,3306,5000,4000,8888,5432,15672,9999,161,4044,7077,4040,9000,8089,443,744 $1
}

#subdomains finder
certspotter(){
curl -s https://certspotter.com/api/v0/certs\?domain\=$1 | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $1
}

#subdomains finder
crtsh(){
curl -s https://crt.sh/?Identity=%.$1 | grep ">*.$1" | sed 's/<[/]*[TB][DR]>/\n/g' | grep -vE "<|^[\*]*[\.]*$1" | sort -u | awk 'NF'
}

#directlty nmap subdomains
certnmap(){
curl https://certspotter.com/api/v0/certs\?domain\=$1 | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $1  | nmap -T5 -Pn -sS -sC -i - -$
}

#get ip of host passively
ipinfo(){
curl http://ipinfo.io/$1
}

#------ Tools ------
#runs dirsearch and takes host and extension as arguments
dirsearch(){
python3 ~/tools/dirsearch/dirsearch.py -u $1 -e $2 -t 100 -b
}

#sqlmap an url
sqlmap(){
python ~/tools/sqlmap*/sqlmap.py -u $1
}

#opens netcat listener on given port
ncl(){
nc -l -n -vv -p $1
}

#gets all domains from crtsh, runs httprobe and then dir bruteforces
crtshdirsearch(){
curl -s https://crt.sh/?q\=%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | httprobe -c 50 | grep https | xargs -n1 -I{} python3 ~/tools/dirsearch/dirsearch.py -u {} -e $2 -t 150 -b
}

vhs(){
ruby ~/tools/virtual-host-discovery/scan.rb --ip=$1 --host=$2
}

nmapctf(){
	ports=$(nmap -p- --min-rate=1000  -T4 $1 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
	nmaps -Pn -p$ports $1
}

#----- CTF's -----
# HackTheBox
htb(){
    pid=$(pgrep openvpn | sed -ne 's/\([0-9]*\)/\1/p')
    kill $pid
    cd ~/htb
    openvpn *.ovpn &>/dev/null &
    clear
}

# TryHackMe
thm(){
    pid=$(pgrep openvpn | sed -ne 's/\([0-9]*\)/\1/p')
    kill $pid
    cd ~/thm
    openvpn *.ovpn &>/dev/null &
    clear
}
